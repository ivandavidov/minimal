# If this is the first time you build "Minimal Linux Live", then I suggest you
# go through the README file first.

###################################################
#                                                 #
#  This section contains the main source bundles  #
#                                                 #
###################################################

# You can find the latest Linux kernel source bundles here:
#
#   http://kernel.org
#
KERNEL_SOURCE_URL=http://kernel.org/pub/linux/kernel/v4.x/linux-4.9.338.tar.xz

# You can find the latest GNU libc source bundles here:
#
#   http://gnu.org/software/libc
#
GLIBC_SOURCE_URL=http://ftp.gnu.org/gnu/glibc/glibc-2.25.tar.bz2

# You can find the latest BusyBox source bundles here:
#
#   http://busybox.net
#
BUSYBOX_SOURCE_URL=http://busybox.net/downloads/busybox-1.27.1.tar.bz2

# You can find the latest Syslinux source bundles here:
#
#   http://syslinux.org (official website)
#
#   http://kernel.org/pub/linux/utils/boot/syslinux
#
SYSLINUX_SOURCE_URL=http://kernel.org/pub/linux/utils/boot/syslinux/syslinux-6.03.tar.xz



#####################################################################
#                                                                   #
#  This section contains the overlay source bundles and properties  #
#                                                                   #
#####################################################################

# You can find the latest Links source bundles here:
#
#   http://links.twibright.com
#
LINKS_SOURCE_URL=http://links.twibright.com/download/links-2.14.tar.bz2

# You can find the latest Dropbear source bundles here:
#
#   http://matt.ucc.asn.au/dropbear/dropbear.html
#
DROPBEAR_SOURCE_URL=http://matt.ucc.asn.au/dropbear/releases/dropbear-2017.75.tar.bz2

# You can find the latest Apache Felix source bundles here:
#
#   http://felix.apache.org
#
FELIX_SOURCE_URL=http://archive.apache.org/dist/felix/org.apache.felix.main.distribution-5.6.4.tar.gz

# You need to manually download Oracle's JRE or JDK and set the property with
# the absolute path to the downloaded archive. Example:
#
#   JAVA_ARCHIVE=/home/ivan/Downloads/jdk-8u131-linux-x64.tar.gz
#
#JAVA_ARCHIVE=/absolute/path/to/java.archive.tar.gz
#JAVA_ARCHIVE=/home/ivan/Downloads/jdk-8u131-linux-x64.tar.gz

# You can find the latest Lua source bundes here:
#
#   https://www.lua.org/ftp/
#
LUA_SOURCE_URL=https://www.lua.org/ftp/lua-5.3.4.tar.gz

# You can find the latest static-get shell script here:
#
#   http://s.minos.io/s
#   http://github.com/minos-org/minos-static
#
STATIC_GET_SOURCE_URL=http://s.minos.io/s

# You can find the latest Cloud Foundry CLI binary here:
#
#   http://github.com/cloudfoundry/cli
#
CLOUD_FOUNDRY_CLI_URL=http://cli.run.pivotal.io/stable?release=linux64-binary&source=github

####################################################
#                                                  #
#  This section contains configuration properties  #
#                                                  #
####################################################

# Use predefined '.config' file when building the kernel. This overrides the
# config generation in 'xx_build_kernel.sh' and the build process uses the
# config file provided in this parameter. Place the configuration file here:
#
# minimal_config/kernel.config
#
USE_PREDEFINED_KERNEL_CONFIG=false

# Use predefined '.config' file when building BusyBox. This overrides the config
# generation in 'xx_build_busybox.sh' and the build process uses the config file
# provided in this parameter. Place the configuration file here:
#
# minimal_config/busybox.config
#
USE_PREDEFINED_BUSYBOX_CONFIG=false

# Define the overlay type to use. Possible values are 'sparse' and 'folder'. You
# can use any other value, no value, or comment the property in order to disable
# it. Put your overlay content in the folder 'minimal_overlay' and it will be
# automatically merged with the root file system on boot. The build process
# creates either '/minimal.img/rootfs' or '/minimal/rootfs' (read below) and
# this folder contains all overlay content in it. The build process also creates
# '/minimal.img/work' or '/minimal/work'. This folder is used by the overlay
# driver to store modifications related to the read only storage. If the overlay
# media is writeable, then all changes on the root filesystem are automatically
# persisted and preserved on reboot.
#
# sparse - use sparse file 'minimal.img' with hardcoded maximal size of 1MB (see
#          xx_generate_iso.sh). The generated ISO image is larger because the
#          sparse file is treated as regular file. This option requires root
#          permissions or otherwise sparse file generation is silently skipped.
#          Sparse file is treated as separate disk image and works fine on FAT.
#
# folder - use normal folder structure (/minimal/). Note that this doesn't work
#          if the file system is FAT because FAT requires special handling, e.g.
#          POSIX overlay (http://sf.net/p/posixovl). This is the default option
#          because it doesn't require root permissions.
#
OVERLAY_TYPE=folder

# Use already downloaded source bundles instead of downloading them from
# internet. This is useful when you have already downloaded the sources and have
# no internet connection. Or if you want to share your version of "Minimal Linux
# Live" with predefined sources.
USE_LOCAL_SOURCE=false

# Copy "Minimal Linux Live" source files and folders in '/src' inside initramfs.
# The default value is 'true'. You can use any other value, no value, or comment
# the property in order to disable it.
COPY_SOURCE_ROOTFS=true

# Copy "Minimal Linux Live" source files and folders in '/src' on the ISO image.
# The default value is 'true'. You can use any other value, no value, or comment
# the property in order to disable it.
COPY_SOURCE_ISO=true

# This property defines one or more additional overlay software pieces which
# will be generated and placed in the 'work/src/minimal_overlay/rootfs' folder.
# These software pieces will be visible and fully usable after boot. By default
# this property is disabled because the build process for most of the software
# is host specific and may not work out of the box. Note that if you build any
# overlay software and you are using sparse image file for the overlay structure
# then most probably something will go wrong because the overlay software
# requires more than 1MB free space. The solution is to use folder overlay or to
# edit the script 'xx_generate_iso.sh' and set it to create sparse image file
# with bigger size.
#
# Currently available overlay software:
#
# glibc_full - all core GNU C libraries (useful if other software is included).
# links      - text browser.
# dropbear   - SSH server and client.
# java       - installs Oracle's JRE or JDK. Manual preparations are required.
# felix      - Apache Felix OSGi framework.
# mll_utils  - set of executable utilities (mll-*).
# lua        - scripting language
# static_get - portable binaries for Linux (http://s.minos.io)
# cf_cli     - CLoud Foundry CLI (command line interface)
# nweb       - simple mini http server
#
# Refer to the README file for more information.
#
#OVERLAY_BUNDLES=glibc_full,links,dropbear,java,felix,mll_utils,lua,static_get,cf_cli
#OVERLAY_BUNDLES=cf_cli
OVERLAY_BUNDLES=nweb

# This property enables the standard penguin boot logo in the upper left corner
# of the screen. The property is used in 'xx_build_kernel.sh'. The default value
# is 'true' for demonstration purposes.
USE_BOOT_LOGO=true

# This property is the multiplicator which is used during the build process. The
# total number of each 'make' jobs will be equal to the number of detected CPU
# cores mutiplied by this property. For example, if you set this property with
# value '2' and if your CPU has 4 cores, then the number of 'make' jobs will be
# 4 * 2 = 8. Don't change this property unless you know what 'make' jobs are!
JOB_FACTOR=1

# This property defines the default GCC flags to be used during the compilation
# process. You can use your own flags here or even completely remove the flags.
CFLAGS=-Os -s -fno-stack-protector -fomit-frame-pointer -U_FORTIFY_SOURCE
